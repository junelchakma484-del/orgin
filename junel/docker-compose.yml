version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13
    container_name: face_mask_postgres
    environment:
      POSTGRES_DB: face_mask_detection
      POSTGRES_USER: face_mask_user
      POSTGRES_PASSWORD: face_mask_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - face_mask_network

  # Redis for Message Queue
  redis:
    image: redis:6-alpine
    container_name: face_mask_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - face_mask_network

  # MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: face_mask_mosquitto
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    networks:
      - face_mask_network

  # Grafana for Analytics
  grafana:
    image: grafana/grafana:latest
    container_name: face_mask_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - face_mask_network
    depends_on:
      - postgres

  # Face Mask Detection System
  face_mask_detection:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: face_mask_detection
    environment:
      - DATABASE_URL=postgresql://face_mask_user:face_mask_password@postgres:5432/face_mask_detection
      - REDIS_URL=redis://redis:6379
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - WEB_HOST=0.0.0.0
      - WEB_PORT=5000
    ports:
      - "5000:5000"
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./config:/app/config
    networks:
      - face_mask_network
    depends_on:
      - postgres
      - redis
      - mosquitto
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: face_mask_celery
    command: celery -A src.workers.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://face_mask_user:face_mask_password@postgres:5432/face_mask_detection
      - REDIS_URL=redis://redis:6379
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    networks:
      - face_mask_network
    depends_on:
      - postgres
      - redis
      - mosquitto
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: face_mask_celery_beat
    command: celery -A src.workers.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://face_mask_user:face_mask_password@postgres:5432/face_mask_detection
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./logs:/app/logs
    networks:
      - face_mask_network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: face_mask_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - face_mask_network
    depends_on:
      - face_mask_detection
      - grafana
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  grafana_data:

networks:
  face_mask_network:
    driver: bridge
